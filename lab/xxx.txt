ASSEMBLER

Kroki:
MOV	A=B
ADD	A+=B
SUB	A-=B
MUL	A*=B
DIV	A/=B
MOD	A%=B
INC	A++
DEC	A--
CMP	A?<>B

Adres pamięci [C0]
Podręczna AL, BL, CL, DL

Flagi:
Z	zero
S	ujemny
O	przepełniony
I	przerwania

Stos:
PUSH 	odkłada na stos
POP	zdejmuje ze stosu
PUSHF	odkłada flagę na stos
POPF	zdejmuje flagę ze stosu

Instrukcje skoku (if):
JMP	skok bezwarunkowy do wskazanej etykiety
JZ	skacze do wskazanej etykiety jeśli flaga Z jest ustawiona
JNZ	skacze do wskazanej etykiety jeśli flaga Z nie jest ustawiona
JS	skacze do wskazanej etykiety jeśli flaga S jest ustawiona
JNS	skacze do wskazanej etykiety jeśli flaga S nie jest ustawiona
JO	skacze do wskazanej etykiety jeśli flaga O jest ustawiona
JNO	skacze do wskazanej etykiety jeśli flaga O nie jest ustawiona

Pętla:

***
for:
	CMP cx, 0
	JZ koniec
	PUSH cx
	operacje
	POP cx
	DEC cx
	JMP for
koniec:
	END
***

Zmienna: komórka pamięci np. B0
2xDEC AL zajmuje więcej pamięci niż SUB AL,2

Tablice:
ORG	adres - kod będzie generowany od adresu A
DB	wartość bajtu - zapisuje wartość podaną jako operand A w pamięci RAM
DB	"tekst" - zapisuje kody ASCII podanego ciągu znaków w kolejnych komórkach pamięci

Procedury:
CALL	adres procedury - zapisuje wartość rejestru IP na stosie i skacze do adresu wskazanego przez operand
RET	przywraca rejestr IP ze stosu i skacze pod adres tam zawarty

Dostępne urządzenia i numery ich portów:
Numer portu 	Urządzenie
00	 	Dane z klawiatury
01		Światła drogowe
02		Wyświetlacz siedmiosegmentowy
03		Grzałka i termostat
04		Labirynt
05		Silnik krokowy
06	 	Winda
07	 	Klawiatura
08		Klawiatura numeryczna

